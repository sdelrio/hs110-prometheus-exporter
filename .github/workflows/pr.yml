name: Pull Request CI

on:

  pull_request:

jobs:
  pullrequest:
    env:
      COMPOSE_DOCKER_CLI_BUILD: 0
      COMPOSE_INTERACTIVE_NO_CLI: 1  ## fixes the input device is not a TTY on docker compose
      DOCKER_BUILDKIT: 0
      DOCKERGPR_USER: ${{ github.actor }}
      DOCKERGPR_PASS: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:

      - uses: actions/checkout@v2

      - name: Log into Github Package Registry
        run: echo "$DOCKERGPR_PASS" | docker login docker.pkg.github.com -u $DOCKERGPR_USER --password-stdin

      - name: Build test image and run tests with GPR cache
        run: make test-image-gpr

  push:
    env:
      COMPOSE_DOCKER_CLI_BUILD: 0
      COMPOSE_INTERACTIVE_NO_CLI: 1  ## fixes the input device is not a TTY on docker compose
      DOCKER_BUILDKIT: 0
      DOCKERGPR_USER: ${{ github.actor }}
      DOCKERGPR_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_USER: ${{ github.actor }}
      DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
    runs-on: ubuntu-latest

    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build test image and run tests
        run: make test-image-gpr

      - name: Prepare qemu for armbuilds on docker
        run: make qemu-arm-linux

      - name: Build all images using GPR cache layer
        run: make build-images-gpr

      - name: Log into registry
        run: echo "$DOCKERHUB_PASS" | docker login -u $DOCKERHUB_USER --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          IMAGE_TAG=$VERSION make publish-images

